name: 'Test SBOM Generation'

on:
  workflow_dispatch:
    inputs:
      test-version:
        description: 'Test version to use'
        required: false
        default: '1.0.0-test'
        type: string
      skip-docker:
        description: 'Skip Docker SBOM generation'
        required: false
        default: false
        type: boolean
      test-docker-image:
        description: 'Existing Docker image to test with (optional)'
        required: false
        type: string
        default: ''

  push:
    branches:
      - 'sbom-attestation'

jobs:
  test-build:
    name: Test Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      test-version: ${{ steps.set-version.outputs.version }}
      docker-image-name: ${{ steps.set-version.outputs.docker-image-name }}

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 22.x

      - name: Setup corepack and pnpm
        run: |
          npm i -g corepack@0.33
          corepack enable

      - run: pnpm install --frozen-lockfile

      - name: Set test version
        id: set-version
        run: |
          if [ -n "${{ github.event.inputs.test-version }}" ]; then
            VERSION="${{ github.event.inputs.test-version }}"
          else
            BASE_VERSION=$(node -e 'console.log(require("./package.json").version)')
            VERSION="${BASE_VERSION}-test-${GITHUB_SHA:0:8}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "docker-image-name=ghcr.io/${{ github.repository_owner }}/n8n" >> $GITHUB_OUTPUT
          echo "Test version: $VERSION"

      - name: Build
        run: pnpm build

      - name: Cache build artifacts
        uses: actions/cache/save@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ./packages/**/dist
          key: ${{ github.sha }}-test-build

      - name: Test dry-run publishing
        run: pnpm publish -r --no-git-checks --dry-run

  test-docker-build:
    name: Test Docker Build
    needs: [test-build]
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip-docker && !inputs.skip-docker }}
    timeout-minutes: 20
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Build Docker image (test only)
        id: build
        uses: docker/build-push-action@b32b51a8eda65d6793cd0494a773d4f6bcef32dc # v6.11.0
        with:
          context: .
          file: docker/images/n8n/Dockerfile
          build-args: |
            N8N_VERSION=${{ needs.test-build.outputs.test-version }}
            N8N_RELEASE_TYPE=test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: false
          sbom: false
          push: false
          tags: |
            ${{ needs.test-build.outputs.docker-image-name }}:${{ needs.test-build.outputs.test-version }}

  test-sbom-generation:
    name: Test SBOM Generation
    needs: [test-build]
    uses: ./.github/workflows/security-sbom-attestation.yml
    with:
      version: ${{ needs.test-build.outputs.test-version }}
      docker-image-name: ${{ needs.test-build.outputs.docker-image-name }}
      docker-image-digest: ${{ needs.test-docker-build.outputs.image-digest || '' }}
      npm-package-paths: '["packages/*/package.json"]'
      dockerfile-path: 'docker/images/n8n/Dockerfile'
      skip-docker-sbom: ${{ github.event.inputs.skip-docker == 'true' || inputs.skip-docker }}
      test-mode: true
    secrets:
      AIKIDO_API_KEY: ${{ secrets.AIKIDO_API_KEY }}

  test-existing-docker-sbom:
    name: Test Existing Docker SBOM
    needs: [test-build]
    if: ${{ github.event.inputs.test-docker-image != '' }}
    uses: ./.github/workflows/security-sbom-attestation.yml
    with:
      version: ${{ needs.test-build.outputs.test-version }}-existing
      docker-image-name: ${{ github.event.inputs.test-docker-image }}
      npm-package-paths: '["packages/*/package.json"]'
      skip-docker-sbom: false
      test-mode: true
    secrets:
      AIKIDO_API_KEY: ${{ secrets.AIKIDO_API_KEY }}

  test-summary:
    name: Test Summary
    needs: [test-build, test-sbom-generation]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@f44cd7b40bfd40b6aa1cc1b9b5b7bf03d3d64cf2 # v4.1.0
        with:
          pattern: '*${{ needs.test-build.outputs.test-version }}*'
          merge-multiple: true

      - name: Generate test summary
        run: |
          echo "# 🧪 SBOM Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Version:** ${{ needs.test-build.outputs.test-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📁 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### SBOM Files" >> $GITHUB_STEP_SUMMARY
          if ls sbom-*.json 1> /dev/null 2>&1; then
            for file in sbom-*.json; do
              size=$(du -h "$file" | cut -f1)
              components=$(jq '.components | length // 0' "$file" 2>/dev/null)
              vulnerabilities=$(jq '.vulnerabilities | length // 0' "$file" 2>/dev/null)
              echo "- **$file** (${size})" >> $GITHUB_STEP_SUMMARY
              echo "  - Components: $components" >> $GITHUB_STEP_SUMMARY
              echo "  - Vulnerabilities: $vulnerabilities" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "❌ No SBOM files found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Reports" >> $GITHUB_STEP_SUMMARY
          if ls *security-report*.json 1> /dev/null 2>&1; then
            for file in *security-report*.json; do
              size=$(du -h "$file" | cut -f1)
              echo "- **$file** (${size})" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "❌ No security reports found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Test Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Test Build | ${{ needs.test-build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generation | ${{ needs.test-sbom-generation.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test-sbom-generation.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **All tests passed!** Your SBOM generation workflow is working correctly." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the generated SBOM files in the workflow artifacts" >> $GITHUB_STEP_SUMMARY
            echo "2. Check the security reports for any vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "3. If everything looks good, integrate the workflow into your release process" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Tests failed.** Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi

          cat $GITHUB_STEP_SUMMARY
